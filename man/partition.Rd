% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/partition.R
\name{partition}
\alias{partition}
\title{Convert columns of data frame to Boolean or fuzzy sets (of triangular,
trapezoidal, or raised-cosinal shape)}
\usage{
partition(
  .data,
  .what = everything(),
  ...,
  .breaks = NULL,
  .labels = NULL,
  .na = TRUE,
  .keep = FALSE,
  .method = "crisp",
  .right = TRUE,
  .span = 1,
  .inc = 1
)
}
\arguments{
\item{.data}{the data frame to be processed}

\item{.what}{a tidyselect expression (see
\href{https://tidyselect.r-lib.org/articles/syntax.html}{tidyselect syntax})
specifying the columns to be transformed}

\item{...}{optional other tidyselect expressions selecting additional
columns to be processed}

\item{.breaks}{for numeric columns, this has to be either an integer scalar
or a numeric vector. If \code{.breaks} is an integer scalar, it specifies
the number of resulting intervals to break the numeric column to
(for \code{.method="crisp"}) or the number of target fuzzy sets (for
\code{.method="triangle"} or \verb{.method="raisedcos}). If \code{.breaks} is a vector,
the values specify the borders of intervals (for \code{.method="crisp"})
or the breaking points of fuzzy sets.}

\item{.labels}{character vector specifying the names used to construct
the newly created column names. If \code{NULL}, the labels are generated
automatically.}

\item{.na}{if \code{TRUE}, an additional logical column is created for each
source column that contains \code{NA} values. For column named \code{x}, the
newly created column's name will be \code{x=NA}.}

\item{.keep}{if \code{TRUE}, the original columns being transformed remain
present in the resulting data frame.}

\item{.method}{The method of transformation for numeric columns. Either
\code{"crisp"}, \code{"triangle"}, or \code{"raisedcos"} is required.}

\item{.right}{If \code{.method="crisp"}, this argument specifies if the
intervals should be closed on the right (and open on the left) or
vice versa.}

\item{.span}{The span of the intervals for numeric columns. If \code{.method="crisp"},
this argument specifies the number of consecutive breaks in a single
resulting interval. If \code{.method="triangle"} or \code{.method="raisedcos"},
this argument specifies the number of breaks that should form the
core of the fuzzy set, (i.e. where the membership degrees are 1). For
\code{.span = 1}, the fuzzy set has a triangular shape with only a single
value with membership equal to 1, for \code{.span = 2}, the fuzzy set has
a trapezoidal shape.}

\item{.inc}{how many breaks to move on to the right when creating the next
column from a numeric column in \code{x}. In other words, if \code{.inc = 1},
all resulting columns are created (by shifting breaks by 1), if
\code{.inc = 2}, the first, third, fifth, etc. columns are created, i.e.,
every second resulting column is skipped.}
}
\value{
A tibble created by transforming \code{.data}.
}
\description{
Convert the selected columns of the data frame into either dummy
logical columns, or into membership degrees of fuzzy sets, while leaving
the remaining columns untouched. Each column selected for transformation
typically results in multiple columns in the output.
}
\details{
Transformations performed by this function are typically useful as a
preprocessing step before using the \code{\link[=dig]{dig()}} function or some of its
derivatives (\code{\link[=dig_correlations]{dig_correlations()}}, \code{\link[=dig_paired_baseline_contrasts]{dig_paired_baseline_contrasts()}},
\code{\link[=dig_associations]{dig_associations()}}).

The transformation of selected columns differ based on the type. Concretely:
\itemize{
\item \strong{logical} column \code{x} is transformed into pair of logical columns,
\code{x=TRUE} and\code{x=FALSE};
\item \strong{factor} column \code{x}, which has levels \code{l1}, \code{l2}, and \code{l3}, is transformed
into three logical columns named \code{x=l1}, \code{x=l2}, and \code{x=l3};
\item \strong{numeric} column\code{x} is transformed accordingly to \code{.method} argument:
\itemize{
\item if \code{.method="crisp"}, the column is first transformed into a factor
with intervals as factor levels and then it is processed as a factor
(see above);
\item for other \code{.method} (\code{triangle} or \code{raisedcos}), several new columns
are created, where each column has numeric values from the interval
\eqn{[0,1]} and represents a certain fuzzy set (either triangular or
raised-cosinal).
Details of transformation of numeric columns can be specified with
additional arguments (\code{.breaks}, \code{.labels}, \code{.right}).
}
}

The processing of source \strong{numeric} columns is quite complex and depends
on the following arguments: \code{.method}, \code{.breaks}, \code{.right}, \code{.span}, and
\code{.inc}.
}
\section{Crisp transformation of numeric data}{


For \code{.method = "crisp"}, the numeric column is transformed into a set of
logical columns where each column represents a certain interval of values.
The intervals are determined by the \code{.breaks} argument.

If \code{.breaks} is an integer scalar, it specifies the number of resulting
intervals to break the numeric column to. The intervals are obtained
automatically from the source column by splitting the range of the source
values into \code{.breaks} intervals of equal length. The first and the last
interval are defined from the minimum infinity to the first break and from
the last break to the maximum infinity, respectively.

If \code{.breaks} is a vector, the values specify the manual borders of intervals.
(Infinite values are allowed.)

For \code{.span = 1} and \code{.inc = 1}, the intervals are consecutive and
non-overlapping. If \code{.breaks = c(1, 3, 5, 7, 9, 11)} and \code{.right = TRUE},
for example, the following intervals are considered: \eqn{(1;3]}, \eqn{(3;5]},
\eqn{(5;7]}, \eqn{(7;9]}, and \eqn{(9;11]}. (If \code{.right = FALSE}, the intervals are:
\eqn{[1;3)}, \eqn{[3;5)}, \eqn{[5;7)}, \eqn{[7;9)}, and \eqn{[9;11)}.)

For \code{.span} > 1, the intervals overlap in \code{.span} breaks. For
\code{.span = 2}, \code{.inc = 1}, and \code{.right = TRUE}, the intervals are: \eqn{(1;5]},
\eqn{(3;7]}, \eqn{(5;9]}, and \eqn{(7;11]}.

As can be seen, so far the next interval was created by shifting in 1
position in \code{.breaks}. The \code{.inc} argument modifies that shift. If \code{.inc = 2}
and \code{.span = 1}, the intervals are: \eqn{(1;3]}, \eqn{(5;7]}, and \eqn{(9;11]}.
For \code{.span = 2} and \code{.inc = 3}, the intervals are: \eqn{(1;5]}, and \eqn{(9;11]}.
}

\section{Fuzzy transformation of numeric data}{


For \code{.method = "triangle"} or \code{.method = "raisedcos"}, the numeric column is
transformed into a set of columns where each column represents membership
degrees to a certain fuzzy set. The shape of the underlying fuzzy sets
is again determined by the \code{.breaks} argument.

If \code{.breaks} is an integer scalar, it specifies the number of target fuzzy
sets. The breaks are determined automatically from the source data column
similarly as in the crisp transformation described above.

If \code{.breaks} is a vector, the values specify the breaking points of fuzzy sets.
Infinite values as breaks produce fuzzy sets with open borders.

For \code{.span = 1}, each underlying fuzzy set is determined by three consecutive
breaks. Outside of these breaks, the membership degree is 0. In the interval
between the first two breaks, the membership degree is increasing and
in the interval between the last two breaks, the membership degree is
decreasing. Hence the membership degree 1 is obtained for values equal to
the middle break. This practically forms fuzzy sets of triangular or
raised-cosinal shape.

For \code{.span} > 1, the fuzzy set is determined by four breaks. Outside of
these breaks, the membership degree is 0. In the interval between the first
and the second break, the membership degree is increasing, in the interval
between the third and the fourth break, the membership degree is decreasing,
and in the interval between the second and the third break, the membership
degree is 1. This practically forms fuzzy sets of trapezoidal shape.

Similar to the crisp transformation, the \code{.inc} argument determines the
shift of breaks when creating the next underlying fuzzy set.

Let \code{.breaks = c(1, 3, 5, 7, 9, 11)}. For \code{.span = 1} and \code{.inc = 1}, the
fuzzy sets are determined by the following triplets having effectively the
triangular or raised-cosinal shape: \eqn{(1;3;5)},
\eqn{(3;5;7)}, \eqn{(5;7;9)}, and \eqn{(7;9;11)}.

For \code{.span = 2} and \code{.inc = 1}, the fuzzy sets are determined by the following
quadruplets: \eqn{(1;3;5;7)}, \eqn{(3;5;7;9)}, and \eqn{(5;7;9;11)}. These
fuzzy sets have the trapezoidal shape with linear (if \code{.method = "triangle"})
or cosine (if \code{.method = "raisedcos"}) increasing and decreasing border-parts.

For \code{.span = 1} and \code{.inc = 3}, the fuzzy sets are determined by the following
triplets: \eqn{(1;3;5)}, and \eqn{(7;9;11)} while skipping 2nd and 3rd fuzzy
sets.

See the examples for more details.
}

\examples{
# transform logical columns and factors
d <- data.frame(a = c(TRUE, TRUE, FALSE),
                b = factor(c("A", "B", "A")),
                c = c(1, 2, 3))
partition(d, a, b)

# transform numeric columns to logical columns (crisp transformation)
partition(CO2, conc:uptake, .method = "crisp", .breaks = 3)

# transform numeric columns to triangular fuzzy sets:
partition(CO2, conc:uptake, .method = "triangle", .breaks = 3)

# transform numeric columns to raised-cosinal fuzzy sets
partition(CO2, conc:uptake, .method = "raisedcos", .breaks = 3)

# transform numeric columns to trapezoidal fuzzy sets overlapping in non-core
# regions so that the membership degrees sum to 1 along the consecutive fuzzy sets
# (i.e., the so-called Ruspini condition is met)
partition(CO2, conc:uptake, .method = "triangle", .breaks = 3, .span = 2, .inc = 2)

# complex transformation with different settings for each column
CO2 |>
    partition(Plant:Treatment) |>
    partition(conc,
              .method = "raisedcos",
              .breaks = c(-Inf, 95, 175, 350, 675, 1000, Inf)) |>
    partition(uptake,
              .method = "triangle",
              .breaks = c(-Inf, 7.7, 28.3, 45.5, Inf),
              .labels = c("low", "medium", "high"))
}
\author{
Michal Burda
}

// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dig_
List dig_(List chains, CharacterVector namesVector, LogicalVector isCondition, LogicalVector isFocus, List confList);
RcppExport SEXP _nuggets_dig_(SEXP chainsSEXP, SEXP namesVectorSEXP, SEXP isConditionSEXP, SEXP isFocusSEXP, SEXP confListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type chains(chainsSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type namesVector(namesVectorSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type isCondition(isConditionSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type isFocus(isFocusSEXP);
    Rcpp::traits::input_parameter< List >::type confList(confListSEXP);
    rcpp_result_gen = Rcpp::wrap(dig_(chains, namesVector, isCondition, isFocus, confList));
    return rcpp_result_gen;
END_RCPP
}
// raisedcos_
NumericVector raisedcos_(NumericVector x, NumericVector ctx);
RcppExport SEXP _nuggets_raisedcos_(SEXP xSEXP, SEXP ctxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ctx(ctxSEXP);
    rcpp_result_gen = Rcpp::wrap(raisedcos_(x, ctx));
    return rcpp_result_gen;
END_RCPP
}
// triangle_
NumericVector triangle_(NumericVector x, NumericVector ctx);
RcppExport SEXP _nuggets_triangle_(SEXP xSEXP, SEXP ctxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ctx(ctxSEXP);
    rcpp_result_gen = Rcpp::wrap(triangle_(x, ctx));
    return rcpp_result_gen;
END_RCPP
}
// which_antichain_
IntegerVector which_antichain_(List x, IntegerVector dist);
RcppExport SEXP _nuggets_which_antichain_(SEXP xSEXP, SEXP distSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dist(distSEXP);
    rcpp_result_gen = Rcpp::wrap(which_antichain_(x, dist));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP run_testthat_tests(SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_nuggets_dig_", (DL_FUNC) &_nuggets_dig_, 5},
    {"_nuggets_raisedcos_", (DL_FUNC) &_nuggets_raisedcos_, 2},
    {"_nuggets_triangle_", (DL_FUNC) &_nuggets_triangle_, 2},
    {"_nuggets_which_antichain_", (DL_FUNC) &_nuggets_which_antichain_, 2},
    {"run_testthat_tests", (DL_FUNC) &run_testthat_tests, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_nuggets(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
